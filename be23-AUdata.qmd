---
title: "Australian Data Forecasting with Package BVAR"
author: 
  - name: "Type your name"
format:
  html:
    theme: cosmo
    toc: true

---

> **Task:** Adjust this **Quarto** template to perform your Bayesian VAR model estimation and forecasting. Search for the variables of interest using function `readrba::browse_rba_series()`, download the chosen 4 variables using function `readrba::read_rba()`, and create a data matrix. Subsequently employ the model estimation and forecasting workflow using package **BVAR** and report the basic outputs of your analysis.

# Download the data

```{r interest data}
#| echo: true
#| message: false
#| warning: false

# download daily interest rates
icr_dwnld   = readrba::read_rba(series_id = "FIRMMCRTD")   # Cash Rate Target
icr_tmp     = xts::xts(icr_dwnld$value, icr_dwnld$date)

by1m_dwnld = readrba::read_rba(series_id = "FIRMMBAB30D")
by1m_tmp   = xts::xts(by1m_dwnld$value, by1m_dwnld$date)

short       = na.omit(merge(icr_tmp, by1m_tmp))
forecast_day          = "/2023-09-06"

# daily data
variables             = short
colnames(variables)   = c("cash rate", "1m")
variables             = variables[forecast_day]

# monthly data
monthly               = xts::to.monthly(variables, OHLC = FALSE)
plot(monthly)
```

# Prior Setup and Hyper-parameter Estimation

```{r priors}
set.seed(123)
library(bsvarSIGNs)

burn = 1000
S    = 10000

# forecasting for a model with estimated hyper-parameters
############################################################
set.seed(123)

Y = as.matrix(monthly)
# specify the model
spec = specify_bsvarSIGN$new(Y, p = 1)

spec$prior$estimate_hyper(S + burn, burn, mu = TRUE, delta = TRUE, lambda = TRUE, psi = TRUE)
```

# Estimation

## Estimate the model

```{r estimation}
#| echo: true
#| message: false
#| warning: false
#| error: false

# estimate the model
post = estimate(spec, S = S)

```

## Report MCMC convergence

```{r mcmc}

rownames(spec$prior$hyper) = c("mu", "delta", "lambda", paste0("psi", 1:2))
plot.ts(t(spec$prior$hyper), col = "#F500BD", bty ="n")

```

## Report the Posterior Moments

```{r means}
mean_A  = apply(post$posterior$A, 1:2, mean)
rownames(mean_A) = colnames(Y)
colnames(mean_A) = c(paste0("A",1:2) ,"mu0")
knitr::kable(mean_A, caption = "Posterior estimates for autoregressive parameters", digits = 2)
```

# Forecasting

```{r forecasting}
# forecast
fore = forecast(post, 12)
plot(fore, probability = 0.68, col = "#F500BD")
```

# Conclusion!

Thank you!